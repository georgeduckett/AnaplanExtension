// Generated from src/Anaplan/AnaplanFormula.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class AnaplanFormulaLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly WS = 2;
	public static readonly IF = 3;
	public static readonly THEN = 4;
	public static readonly ELSE = 5;
	public static readonly BINARYOPERATOR = 6;
	public static readonly NOT = 7;
	public static readonly WORD = 8;
	public static readonly STRINGLITERAL = 9;
	public static readonly QUOTELITERAL = 10;
	public static readonly LSQUARE = 11;
	public static readonly RSQUARE = 12;
	public static readonly LPAREN = 13;
	public static readonly RPAREN = 14;
	public static readonly PLUS = 15;
	public static readonly MINUS = 16;
	public static readonly TIMES = 17;
	public static readonly DIV = 18;
	public static readonly COLON = 19;
	public static readonly EQUALS = 20;
	public static readonly NOTEQUALS = 21;
	public static readonly LT = 22;
	public static readonly GT = 23;
	public static readonly AMPERSAND = 24;
	public static readonly DOUBLEQUOTES = 25;
	public static readonly UNDERSCORE = 26;
	public static readonly QUESTIONMARK = 27;
	public static readonly HASH = 28;
	public static readonly POUND = 29;
	public static readonly PERCENT = 30;
	public static readonly DOT = 31;
	public static readonly PIPE = 32;
	public static readonly SCIENTIFIC_NUMBER = 33;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "WS", "NUMBER", "DIGIT", "LOWERCASE", "UPPERCASE", "WORDSYMBOL", 
		"IF", "THEN", "ELSE", "BINARYOPERATOR", "NOT", "WORD", "STRINGLITERAL", 
		"QUOTELITERAL", "LSQUARE", "RSQUARE", "LPAREN", "RPAREN", "PLUS", "MINUS", 
		"TIMES", "DIV", "COLON", "EQUALS", "NOTEQUALS", "LT", "GT", "AMPERSAND", 
		"DOUBLEQUOTES", "UNDERSCORE", "QUESTIONMARK", "HASH", "POUND", "PERCENT", 
		"DOT", "PIPE", "SCIENTIFIC_NUMBER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "','", undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "'['", "']'", "'('", "')'", 
		"'+'", "'-'", "'*'", "'/'", "':'", "'='", undefined, "'<'", "'>'", "'&'", 
		"'\"'", "'_'", "'?'", "'#'", "'\u00A3'", "'%'", "'.'", "'|'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, "WS", "IF", "THEN", "ELSE", "BINARYOPERATOR", "NOT", 
		"WORD", "STRINGLITERAL", "QUOTELITERAL", "LSQUARE", "RSQUARE", "LPAREN", 
		"RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "COLON", "EQUALS", "NOTEQUALS", 
		"LT", "GT", "AMPERSAND", "DOUBLEQUOTES", "UNDERSCORE", "QUESTIONMARK", 
		"HASH", "POUND", "PERCENT", "DOT", "PIPE", "SCIENTIFIC_NUMBER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(AnaplanFormulaLexer._LITERAL_NAMES, AnaplanFormulaLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return AnaplanFormulaLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(AnaplanFormulaLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "AnaplanFormula.g4"; }

	// @Override
	public get ruleNames(): string[] { return AnaplanFormulaLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return AnaplanFormulaLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return AnaplanFormulaLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return AnaplanFormulaLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02#\xFB\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x03\x02\x03\x02\x03\x03\x06\x03" +
		"S\n\x03\r\x03\x0E\x03T\x03\x03\x03\x03\x03\x04\x06\x04Z\n\x04\r\x04\x0E" +
		"\x04[\x03\x04\x03\x04\x06\x04`\n\x04\r\x04\x0E\x04a\x05\x04d\n\x04\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03" +
		"\t\x03\t\x05\tr\n\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x05" +
		"\n|\n\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\x86\n\v" +
		"\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\x92" +
		"\n\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\r\x9A\n\r\x03\x0E\x07\x0E" +
		"\x9D\n\x0E\f\x0E\x0E\x0E\xA0\v\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\xA5" +
		"\n\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x07\x0E\xAB\n\x0E\f\x0E\x0E\x0E" +
		"\xAE\v\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F\xB4\n\x0F\f\x0F\x0E" +
		"\x0F\xB7\v\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10" +
		"\xBF\n\x10\f\x10\x0E\x10\xC2\v\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03" +
		"\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03" +
		"\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03" +
		"\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%" +
		"\x03%\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x05\'\xF7\n\'\x03\'\x05\'\xFA" +
		"\n\'\x02\x02\x02(\x03\x02\x03\x05\x02\x04\x07\x02\x02\t\x02\x02\v\x02" +
		"\x02\r\x02\x02\x0F\x02\x02\x11\x02\x05\x13\x02\x06\x15\x02\x07\x17\x02" +
		"\b\x19\x02\t\x1B\x02\n\x1D\x02\v\x1F\x02\f!\x02\r#\x02\x0E%\x02\x0F\'" +
		"\x02\x10)\x02\x11+\x02\x12-\x02\x13/\x02\x141\x02\x153\x02\x165\x02\x17" +
		"7\x02\x189\x02\x19;\x02\x1A=\x02\x1B?\x02\x1CA\x02\x1DC\x02\x1EE\x02\x1F" +
		"G\x02 I\x02!K\x02\"M\x02#\x03\x02\n\x05\x02\v\f\x0F\x0F\"\"\x03\x022;" +
		"\x03\x02c|\x03\x02C\\\x07\x02%%\'\'AAaa\xA5\xA5\x03\x02$$\x03\x02))\x04" +
		"\x02GGgg\x02\u010E\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02" +
		"7\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02" +
		"\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02" +
		"\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03" +
		"\x02\x02\x02\x02M\x03\x02\x02\x02\x03O\x03\x02\x02\x02\x05R\x03\x02\x02" +
		"\x02\x07Y\x03\x02\x02\x02\te\x03\x02\x02\x02\vg\x03\x02\x02\x02\ri\x03" +
		"\x02\x02\x02\x0Fk\x03\x02\x02\x02\x11q\x03\x02\x02\x02\x13{\x03\x02\x02" +
		"\x02\x15\x85\x03\x02\x02\x02\x17\x91\x03\x02\x02\x02\x19\x99\x03\x02\x02" +
		"\x02\x1B\x9E\x03\x02\x02\x02\x1D\xAF\x03\x02\x02\x02\x1F\xBA\x03\x02\x02" +
		"\x02!\xC5\x03\x02\x02\x02#\xC7\x03\x02\x02\x02%\xC9\x03\x02\x02\x02\'" +
		"\xCB\x03\x02\x02\x02)\xCD\x03\x02\x02\x02+\xCF\x03\x02\x02\x02-\xD1\x03" +
		"\x02\x02\x02/\xD3\x03\x02\x02\x021\xD5\x03\x02\x02\x023\xD7\x03\x02\x02" +
		"\x025\xD9\x03\x02\x02\x027\xDC\x03\x02\x02\x029\xDE\x03\x02\x02\x02;\xE0" +
		"\x03\x02\x02\x02=\xE2\x03\x02\x02\x02?\xE4\x03\x02\x02\x02A\xE6\x03\x02" +
		"\x02\x02C\xE8\x03\x02\x02\x02E\xEA\x03\x02\x02\x02G\xEC\x03\x02\x02\x02" +
		"I\xEE\x03\x02\x02\x02K\xF0\x03\x02\x02\x02M\xF2\x03\x02\x02\x02OP\x07" +
		".\x02\x02P\x04\x03\x02\x02\x02QS\t\x02\x02\x02RQ\x03\x02\x02\x02ST\x03" +
		"\x02\x02\x02TR\x03\x02\x02\x02TU\x03\x02\x02\x02UV\x03\x02\x02\x02VW\b" +
		"\x03\x02\x02W\x06\x03\x02\x02\x02XZ\x05\t\x05\x02YX\x03\x02\x02\x02Z[" +
		"\x03\x02\x02\x02[Y\x03\x02\x02\x02[\\\x03\x02\x02\x02\\c\x03\x02\x02\x02" +
		"]_\x05I%\x02^`\x05\t\x05\x02_^\x03\x02\x02\x02`a\x03\x02\x02\x02a_\x03" +
		"\x02\x02\x02ab\x03\x02\x02\x02bd\x03\x02\x02\x02c]\x03\x02\x02\x02cd\x03" +
		"\x02\x02\x02d\b\x03\x02\x02\x02ef\t\x03\x02\x02f\n\x03\x02\x02\x02gh\t" +
		"\x04\x02\x02h\f\x03\x02\x02\x02ij\t\x05\x02\x02j\x0E\x03\x02\x02\x02k" +
		"l\t\x06\x02\x02l\x10\x03\x02\x02\x02mn\x07K\x02\x02nr\x07H\x02\x02op\x07" +
		"k\x02\x02pr\x07h\x02\x02qm\x03\x02\x02\x02qo\x03\x02\x02\x02r\x12\x03" +
		"\x02\x02\x02st\x07V\x02\x02tu\x07J\x02\x02uv\x07G\x02\x02v|\x07P\x02\x02" +
		"wx\x07v\x02\x02xy\x07j\x02\x02yz\x07g\x02\x02z|\x07p\x02\x02{s\x03\x02" +
		"\x02\x02{w\x03\x02\x02\x02|\x14\x03\x02\x02\x02}~\x07G\x02\x02~\x7F\x07" +
		"N\x02\x02\x7F\x80\x07U\x02\x02\x80\x86\x07G\x02\x02\x81\x82\x07g\x02\x02" +
		"\x82\x83\x07n\x02\x02\x83\x84\x07u\x02\x02\x84\x86\x07g\x02\x02\x85}\x03" +
		"\x02\x02\x02\x85\x81\x03\x02\x02\x02\x86\x16\x03\x02\x02\x02\x87\x88\x07" +
		"C\x02\x02\x88\x89\x07P\x02\x02\x89\x92\x07F\x02\x02\x8A\x8B\x07c\x02\x02" +
		"\x8B\x8C\x07p\x02\x02\x8C\x92\x07f\x02\x02\x8D\x8E\x07Q\x02\x02\x8E\x92" +
		"\x07T\x02\x02\x8F\x90\x07q\x02\x02\x90\x92\x07t\x02\x02\x91\x87\x03\x02" +
		"\x02\x02\x91\x8A\x03\x02\x02\x02\x91\x8D\x03\x02\x02\x02\x91\x8F\x03\x02" +
		"\x02\x02\x92\x18\x03\x02\x02\x02\x93\x94\x07P\x02\x02\x94\x95\x07Q\x02" +
		"\x02\x95\x9A\x07V\x02\x02\x96\x97\x07p\x02\x02\x97\x98\x07q\x02\x02\x98" +
		"\x9A\x07v\x02\x02\x99\x93\x03\x02\x02\x02\x99\x96\x03\x02\x02\x02\x9A" +
		"\x1A\x03\x02\x02\x02\x9B\x9D\x05\t\x05\x02\x9C\x9B\x03\x02\x02\x02\x9D" +
		"\xA0\x03\x02\x02\x02\x9E\x9C\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F" +
		"\xA4\x03\x02\x02\x02\xA0\x9E\x03\x02\x02\x02\xA1\xA5\x05\v\x06\x02\xA2" +
		"\xA5\x05\r\x07\x02\xA3\xA5\x05\x0F\b\x02\xA4\xA1\x03\x02\x02\x02\xA4\xA2" +
		"\x03\x02\x02\x02\xA4\xA3\x03\x02\x02\x02\xA5\xAC\x03\x02\x02\x02\xA6\xAB" +
		"\x05\v\x06\x02\xA7\xAB\x05\r\x07\x02\xA8\xAB\x05\t\x05\x02\xA9\xAB\x05" +
		"\x0F\b\x02\xAA\xA6\x03\x02\x02\x02\xAA\xA7\x03\x02\x02\x02\xAA\xA8\x03" +
		"\x02\x02\x02\xAA\xA9\x03\x02\x02\x02\xAB\xAE\x03\x02\x02\x02\xAC\xAA\x03" +
		"\x02\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD\x1C\x03\x02\x02\x02\xAE\xAC\x03" +
		"\x02\x02\x02\xAF\xB5\x05=\x1F\x02\xB0\xB4\n\x07\x02\x02\xB1\xB2\x07$\x02" +
		"\x02\xB2\xB4\x07$\x02\x02\xB3\xB0\x03\x02\x02\x02\xB3\xB1\x03\x02\x02" +
		"\x02\xB4\xB7\x03\x02\x02\x02\xB5\xB3\x03\x02\x02\x02\xB5\xB6\x03\x02\x02" +
		"\x02\xB6\xB8\x03\x02\x02\x02\xB7\xB5\x03\x02\x02\x02\xB8\xB9\x05=\x1F" +
		"\x02\xB9\x1E\x03\x02\x02\x02\xBA\xC0\x07)\x02\x02\xBB\xBF\n\b\x02\x02" +
		"\xBC\xBD\x07)\x02\x02\xBD\xBF\x07)\x02\x02\xBE\xBB\x03\x02\x02\x02\xBE" +
		"\xBC\x03\x02\x02\x02\xBF\xC2\x03\x02\x02\x02\xC0\xBE\x03\x02\x02\x02\xC0" +
		"\xC1\x03\x02\x02\x02\xC1\xC3\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC3" +
		"\xC4\x07)\x02\x02\xC4 \x03\x02\x02\x02\xC5\xC6\x07]\x02\x02\xC6\"\x03" +
		"\x02\x02\x02\xC7\xC8\x07_\x02\x02\xC8$\x03\x02\x02\x02\xC9\xCA\x07*\x02" +
		"\x02\xCA&\x03\x02\x02\x02\xCB\xCC\x07+\x02\x02\xCC(\x03\x02\x02\x02\xCD" +
		"\xCE\x07-\x02\x02\xCE*\x03\x02\x02\x02\xCF\xD0\x07/\x02\x02\xD0,\x03\x02" +
		"\x02\x02\xD1\xD2\x07,\x02\x02\xD2.\x03\x02\x02\x02\xD3\xD4\x071\x02\x02" +
		"\xD40\x03\x02\x02\x02\xD5\xD6\x07<\x02\x02\xD62\x03\x02\x02\x02\xD7\xD8" +
		"\x07?\x02\x02\xD84\x03\x02\x02\x02\xD9\xDA\x057\x1C\x02\xDA\xDB\x059\x1D" +
		"\x02\xDB6\x03\x02\x02\x02\xDC\xDD\x07>\x02\x02\xDD8\x03\x02\x02\x02\xDE" +
		"\xDF\x07@\x02\x02\xDF:\x03\x02\x02\x02\xE0\xE1\x07(\x02\x02\xE1<\x03\x02" +
		"\x02\x02\xE2\xE3\x07$\x02\x02\xE3>\x03\x02\x02\x02\xE4\xE5\x07a\x02\x02" +
		"\xE5@\x03\x02\x02\x02\xE6\xE7\x07A\x02\x02\xE7B\x03\x02\x02\x02\xE8\xE9" +
		"\x07%\x02\x02\xE9D\x03\x02\x02\x02\xEA\xEB\x07\xA5\x02\x02\xEBF\x03\x02" +
		"\x02\x02\xEC\xED\x07\'\x02\x02\xEDH\x03\x02\x02\x02\xEE\xEF\x070\x02\x02" +
		"\xEFJ\x03\x02\x02\x02\xF0\xF1\x07~\x02\x02\xF1L\x03\x02\x02\x02\xF2\xF9" +
		"\x05\x07\x04\x02\xF3\xF6\t\t\x02\x02\xF4\xF7\x05)\x15\x02\xF5\xF7\x05" +
		"+\x16\x02\xF6\xF4\x03\x02\x02\x02\xF6\xF5\x03\x02\x02\x02\xF6\xF7\x03" +
		"\x02\x02\x02\xF7\xF8\x03\x02\x02\x02\xF8\xFA\x05\x07\x04\x02\xF9\xF3\x03" +
		"\x02\x02\x02\xF9\xFA\x03\x02\x02\x02\xFAN\x03\x02\x02\x02\x16\x02T[ac" +
		"q{\x85\x91\x99\x9E\xA4\xAA\xAC\xB3\xB5\xBE\xC0\xF6\xF9\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!AnaplanFormulaLexer.__ATN) {
			AnaplanFormulaLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(AnaplanFormulaLexer._serializedATN));
		}

		return AnaplanFormulaLexer.__ATN;
	}

}

